import sys, time
from  master import Master
config(channel is fifo, clock is lamport)


class GFSClient(process):
    
    def setup(master:Master):
        output('Setting up client', master)
        self.master = master

    def getNumChunks(size):
        return (size//self.master.chunkSize)

    def exists(fileName):
        res = True
        output('Searching for file', fileName)
        send(('FILE_EXISTS_MASTER', fileName), to= master)                 # send and await message from master server
        await(received(('FILE_EXISTS_MASTER_DONE', res), from_=master))
        output('Hi',res)

    def receive(msg= ('WRITE_MSG', threadId, fileName, dataToWrite)):
        if(exists(fileName)):
            self.delete(fileName)
        numChunks = self.getNumChunks(len(dataToWrite))
        chunkuuids = []
        send(('ALLOC_MASTER', fileName, numChunks), to= master)           # send and await message from master server
        await(received(('ALLOC_DONE', chunkuuids), from_=master))
        self.writeChunks(chunkuuids, dataToWrite)

    def writeChunks(chunkuuids, dataToWrite):
        chunks = [ dataToWrite[x: x+self.master.chunksize] for x in range(0, len(dataToWrite), self.master.chunksize) ]
        chunkservers = self.master.chunkServerStore
        for i in range(0, len(chunkuuids)):
            chunkloc = self.master.chunktable(chunkuuids[i])
            send(('WRITE_CHUNK', chunkuuids[i], chunks[i]), to= chunkservers[chunkloc])      # send and await message from chunk server

    def receive(msg= ('WRITE_APPEND_MSG', thread_id, fileName, dataToWrite)):
        if not self.exists(fileName):
            raise Exception("append error, file does not exist: " + fileName)
        numChunks = self.getNumChunks(len(dataToWrite))
        chunkuuids = []
        send(('ALLOC_APPEND_MASTER', fileName, numChunks), to= master)
        await(received(('ALLOC_APPEND_DONE', chunkuuids), from_=master))        # send and await message from master server
        self.writeChunks(chunkuuids, dataToWrite)

    def receive(msg= ('READ_MSG', thread_id, fileName)):
        if not self.exists(fileName):
            raise Exception("read error, file does not exist: " + fileName)
        chunks = []
        chunkuuids = self.master.filetable[fileName]
        chunkservers = self.master.chunkservers
        for chunkuuid in chunkuuids:
            chunkloc = self.master.chunktable(chunkuuid)
            send(('READ_CHUNK', chunkservers[chunkloc], chunkuuid), to= chunk)      # send and await message from chunk server
            await(received(('READ_CHUNK_DONE', chunk), from_= chunk))
            chunks.append(chunk)
        data_read = reduce(lambda x, y: x+y, chunks)
        return data_read

    def receive(msg= ('DELETE', thread_id, fileName)):
        send(('DELETE_FILE_MASTER', fileName), to= master)                         # send and await message from master server
        #Put a timeout in case file not deleted
        await(received(('DELETE_FILE_MASTER_DONE', res), from_=master))
    
    def run():
        exists('abxc.txt')
        while 1:
           a=1 


def main():
    master1 = new(Master)
    setup(master1, ())
    start(master1)
    client1 = new(GFSClient)
    setup(client1, (master1,))
    start(client1)
    await(received(('DONE',)))