"""
Created on Mon Nov 26 18:05:06 2018

@author: risabh
"""

import uuid
from chunk import GFSChunkserver
config(channel is fifo, clock is lamport)

class Master(process):

    def setup():
        output('Setting up Master')
        self.fileStore = {}                 # Maps filename to chunkuuids
        self.chunkStore = {}                # Maps chunkuuids to chunk locations
        self.chunkServerStore = {}          # Maps chunk location to physical server/storage
        self.numChunkServer = 2
        self.chunkSize = 20
        self.counter = 0
        self.initChunks()
    
    def initChunks():
        output('Setting up chunkServer')
        for i in range(self.numChunkServer):
            chunkServer = new(GFSChunkserver)
            setup(chunkServer, (i,))
            start(chunkServer)
            self.chunkServerStore[i] = chunkServer
    
    def allocateChunks(numChunks):
        chunkuuids = []
        for i in range(numChunks):
            chunkuuid = uuid.uuid4()
            chunkLocation = self.counter
            chunkuuids.append(chunkuuid)
            self.chunkStore[chunkuuid] = chunkLocation
            self.counter = (self.counter+1) % self.numChunkServer
        return chunkuuids
     
    def receive(msg= ('ALLOC_MASTER', pid, fileName, numChunks),from_= client):
        chunkuuids = self.allocate(fileName, numChunks)
        send(('ALLOC_DONE', pid, fileName, chunkuuids), to=client)       
    
    def allocate(fileName, numChunks):
        chunkuuids = self.allocateChunks(numChunks)
        self.fileStore[fileName] = chunkuuids
        return chunkuuids
    
    def receive(msg = ('ALLOC_MASTER_APPEND', pid, fileName, numChunks), from_=client):
        chunkuuids = self.allocate_append(fileName, numChunks)
        send(('ALLOC_APPEND_DONE', pid, fileName, chunkuuids), to=client)    
    
    def allocate_append(fileName, numChunks):
        chunkuuids = self.allocateChunks(numChunks)
        chunkuuids_initial = self.fileStore[fileName]
        chunkuuids_initial.extend(chunkuuids)
        return chunkuuids
    
    def receive(msg = ('DELETE_FILE_MASTER', pid, fileName), from_=client):
        fileDeleted = delete(fileName)
        if fileDeleted:
            send(('DELETE_FILE_MASTER_DONE', pid, fileName), to=client)    
        
    def delete(fileName):
        try:
            chunkuuids = self.fileStore[fileName]
            del self.fileStore[fileName]
            return True
        except:
            output('Error while deleting file')
            return False
            
    def receive(msg =('FILE_EXISTS_MASTER', fileName), from_= client):
        res = exists(fileName)
        output(res, client)
        send(('FILE_EXISTS_MASTER_DONE', res), to=client)
        output("RES sent : ", res)
        
    def exists(fileName):
        output('Checking file', fileName)
        if fileName in self.fileStore:
            return True
        return False

    def run():
        await(received(('DONE',)))

    

